<!-- Copyright (c) 2017-2018 Twitter, Inc. -->
<!-- Licensed under the Apache License, Version 2.0 (see LICENSE.md). -->
<!-- Autogenerated by $SoftwareGenerator from $CurrentTemplate. -->

# Reasonable Scala Compiler Performance

Reasonable Scala compiler (also known as Rsc) is an experimental Scala compiler
focused on compilation speed. This project is developed by Eugene Burmako
and his team at Twitter.

Our research goal is to achieve dramatic compilation speedups (5-10x)
for typical Scala codebases, and we are currently well on track to reaching
this goal.

In this document, we aim to publish the results of running our benchmark suite
on the most recent commit in our repository. Since running benchmarks takes time,
there may be short periods of time when this document is out of date. If you're
curious about the exact version of Rsc that is benchmarked in this document,
[click here]($LinkRsc).

## Hardware

All benchmarks run on a computer with
$HardwareCpu (${HardwarePhysicalCores}x${HardwareL1dCache}+${HardwareL1iCache} L1 cache,
${HardwarePhysicalCores}x${HardwareL2Cache} L2 cache, ${HardwareL3Cache} L3 cache,
configured to run ${HardwarePhysicalCores} physical cores and
${HardwareLogicalCores} logical cores with $HardwareTurboBoost),
$HardwareRam RAM and $HardwareDiskDrive disk drive.

## Software

In our benchmarks, we use $SoftwareOperatingSystem and $SoftwareJre
to run [$SoftwareRsc]($LinkRsc), $SoftwareScalac211, $SoftwareScalac212
and $SoftwareJavac.
To benchmark native applications, we use [$SoftwareCliBench]($SoftwareCliBenchUrl).
To benchmark JVM applications, we use $SoftwareSbtJmh that runs in $SoftwareSbt.

Our benchmarks run different fragments of compilation pipelines of
different compilers on two comparable codebases:
  * [re2j]($SoftwareRe2jUrl), an implementation
    of linear time regular expression matching in Java ($SoftwareRe2jLoc loc).
  * [re2s]($SoftwareRe2sUrl), a port of re2j
    to Scala [performed in Scala Native](https://github.com/scala-native/scala-native/pull/894).
    For Rsc, re2s is accompanied by [Stdlib.scala]($SoftwareStdlibUrl),
    a source file that declares stubs for referenced definitions from
    scala-library and the JDK ($SoftwareRe2sScalacLoc loc + $SoftwareStdlibLoc loc =
    $SoftwareRe2sRscLoc loc).

Every benchmark runs in two different modes: cold (performance
of a single run without warm-up) and hot (performance of a steady state achieved
by doing a large number of runs).

## Disclaimer

At this point, Rsc only implements a subset of functionality provided by the
Scala compiler. This means that the benchmark results provided below must
be interpreted with utmost care. Concretely:
  * Performance numbers may significantly deteriorate as we will be
    implementing more and more functionality of the Scala compiler.
    For example, adding support for classpath loading or implicit search
    is very likely to slow down our compiler by a significant factor.
  * Direct comparisons of Rsc and Scalac performance numbers should take
    into account similarities and differences in provided functionality.
    Consult [the summary in the "Compiler" document]($LinkCompilerSummary)
    for more information.

## Results

To reproduce, run `bin/bench` (this will take a while).

<table>
  <th>
    <td>Cold</td>
    <td>Hot</td>
  </th>
  <tr>
    <td width="208px"><a href="$BenchRscNativeScheduleUrl">$BenchRscNativeScheduleLabel</a></td>
    <td width="208px">$BenchRscNativeScheduleColdScore $BenchRscNativeScheduleColdUnit</td>
    <td width="208px">$BenchRscNativeScheduleHotScore $BenchRscNativeScheduleHotUnit</td>
  </tr>
  <tr>
    <td><a href="$BenchRscScheduleUrl">$BenchRscScheduleLabel</a></td>
    <td>$BenchRscScheduleColdScore $BenchRscScheduleColdUnit</td>
    <td>$BenchRscScheduleHotScore $BenchRscScheduleHotUnit</td>
  </tr>
  <tr>
    <td><a href="$BenchScalacNamer211Url">$BenchScalacNamer211Label</a></td>
    <td>$BenchScalacNamer211ColdScore $BenchScalacNamer211ColdUnit</td>
    <td>$BenchScalacNamer211HotScore $BenchScalacNamer211HotUnit</td>
  </tr>
  <tr>
    <td><a href="$BenchScalacNamer212Url">$BenchScalacNamer212Label</a></td>
    <td>$BenchScalacNamer212ColdScore $BenchScalacNamer212ColdUnit</td>
    <td>$BenchScalacNamer212HotScore $BenchScalacNamer212HotUnit</td>
  </tr>
</table>

<table>
  <th>
    <td>Cold</td>
    <td>Hot</td>
  </th>
  <tr>
    <td width="208px"><a href="$BenchRscNativeTypecheckUrl">$BenchRscNativeTypecheckLabel</a></td>
    <td width="208px">$BenchRscNativeTypecheckColdScore $BenchRscNativeTypecheckColdUnit</td>
    <td width="208px">$BenchRscNativeTypecheckHotScore $BenchRscNativeTypecheckHotUnit</td>
  </tr>
  <tr>
    <td><a href="$BenchRscTypecheckUrl">$BenchRscTypecheckLabel</a></td>
    <td>$BenchRscTypecheckColdScore $BenchRscTypecheckColdUnit</td>
    <td>$BenchRscTypecheckHotScore $BenchRscTypecheckHotUnit</td>
  </tr>
  <tr>
    <td><a href="$BenchScalacTyper211Url">$BenchScalacTyper211Label</a></td>
    <td>$BenchScalacTyper211ColdScore $BenchScalacTyper211ColdUnit</td>
    <td>$BenchScalacTyper211HotScore $BenchScalacTyper211HotUnit</td>
  </tr>
  <tr>
    <td><a href="$BenchScalacTyper212Url">$BenchScalacTyper212Label</a></td>
    <td>$BenchScalacTyper212ColdScore $BenchScalacTyper212ColdUnit</td>
    <td>$BenchScalacTyper212HotScore $BenchScalacTyper212HotUnit</td>
  </tr>
</table>

<table>
  <th>
    <td>Cold</td>
    <td>Hot</td>
  </th>
  <tr>
    <td width="208px"><a href="$BenchScalacCompile211Url">$BenchScalacCompile211Label</a></td>
    <td width="208px">$BenchScalacCompile211ColdScore $BenchScalacCompile211ColdUnit</td>
    <td width="208px">$BenchScalacCompile211HotScore $BenchScalacCompile211HotUnit</td>
  </tr>
  <tr>
    <td><a href="$BenchScalacCompile212Url">$BenchScalacCompile212Label</a></td>
    <td>$BenchScalacCompile212ColdScore $BenchScalacCompile212ColdUnit</td>
    <td>$BenchScalacCompile212HotScore $BenchScalacCompile212HotUnit</td>
  </tr>
  <tr>
    <td><a href="$BenchJavacCompileUrl">$BenchJavacCompileLabel</a></td>
    <td>$BenchJavacCompileColdScore $BenchJavacCompileColdUnit</td>
    <td>$BenchJavacCompileHotScore $BenchJavacCompileHotUnit</td>
  </tr>
</table>

## Summary

  * First and foremost, the current prototype of Rsc is significantly faster
    than full Scalac in both cold and hot benchmarks. Most impressively,
    hot typechecking is ~${SummarySpeedupOverScalacTyper}x faster
    [with the disclaimer provided above]($LinkDisclaimer).
  * Scala Native has clearly succeeded in its goal of speeding
    up startup time of Scala applications. In cold benchmarks that are
    representative of running programs from command line, Rsc Native has
    a ~${SummarySpeedupOverRscJVM}x edge over vanilla Rsc.
  * Finally, it was interesting to see that the current prototype of Rsc
    typechecks re2s ~${SummarySpeedupOverJavacCompile}x faster than Javac compiles re2j,
    [given the disclaimer provided above]($LinkDisclaimer).
    As we will be adding more features to Rsc, we will be keeping an eye on how
    this will affect compilation performance relative to Javac.
  * In the benchmarks above, all compilers are run in single-threaded mode.
    However, unlike Scalac and Javac that are inherently single-threaded,
    [Rsc was designed to enable massive parallelism]($LinkCompilerDocument).
    In the near future, we plan to leverage this unique feature of Rsc and
    parallelize its pipeline.
